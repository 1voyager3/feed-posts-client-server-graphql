{"ast":null,"code":"import _toConsumableArray from \"/Users/voyager-imac/WebstormProjects/rest-api/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/voyager-imac/WebstormProjects/rest-api/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/voyager-imac/WebstormProjects/rest-api/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/voyager-imac/WebstormProjects/rest-api/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/voyager-imac/WebstormProjects/rest-api/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/voyager-imac/WebstormProjects/rest-api/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/voyager-imac/WebstormProjects/rest-api/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/voyager-imac/WebstormProjects/rest-api/client/src/pages/Feed/Feed.js\";\nimport React, { Component, Fragment } from 'react';\nimport Post from '../../components/Feed/Post/Post';\nimport Button from '../../components/Button/Button';\nimport FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\nimport Input from '../../components/Form/Input/Input';\nimport Paginator from '../../components/Paginator/Paginator';\nimport Loader from '../../components/Loader/Loader';\nimport ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\nimport './Feed.css';\n\nvar Feed = /*#__PURE__*/function (_Component) {\n  _inherits(Feed, _Component);\n\n  function Feed() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Feed);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Feed)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isEditing: false,\n      posts: [],\n      totalPosts: 0,\n      editPost: null,\n      status: '',\n      postPage: 1,\n      postsLoading: true,\n      editLoading: false\n    };\n\n    _this.loadPosts = function (direction) {\n      if (direction) {\n        _this.setState({\n          postsLoading: true,\n          posts: []\n        });\n      } // pagination\n\n\n      var page = _this.state.postPage;\n\n      if (direction === 'next') {\n        page++;\n\n        _this.setState({\n          postPage: page\n        });\n      }\n\n      if (direction === 'previous') {\n        page--;\n\n        _this.setState({\n          postPage: page\n        });\n      }\n\n      var graphqlQuery = {\n        query: \"\\n        query FetchPosts($page: Int) {\\n          posts(page: $page) {\\n            posts {\\n              _id\\n              title\\n              content\\n              imageUrl\\n              creator {\\n                name\\n              }\\n              createdAt\\n            }\\n            totalPosts\\n          }\\n        }\\n      \",\n        variables: {\n          page: page\n        }\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Fetching posts failed!');\n        }\n\n        _this.setState({\n          posts: resData.data.posts.posts.map(function (post) {\n            return _objectSpread({}, post, {\n              imagePath: post.imageUrl\n            });\n          }),\n          totalPosts: resData.data.posts.totalPosts,\n          postsLoading: false\n        });\n      }).catch(_this.catchError);\n    };\n\n    _this.statusUpdateHandler = function (event) {\n      event.preventDefault();\n      var graphqlQuery = {\n        query: \"\\n          mutation UpdateUserStatus($userStatus: String!) {\\n              updateStatus( status: $userStatus ) {\\n                    status\\n              }\\n          }\\n      \",\n        variables: {\n          userStatus: _this.state.status\n        }\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Fetching posts failed!');\n        }\n\n        console.log(resData);\n      }).catch(_this.catchError);\n    };\n\n    _this.newPostHandler = function () {\n      _this.setState({\n        isEditing: true\n      });\n    };\n\n    _this.startEditPostHandler = function (postId) {\n      _this.setState(function (prevState) {\n        var loadedPost = _objectSpread({}, prevState.posts.find(function (p) {\n          return p._id === postId;\n        }));\n\n        return {\n          isEditing: true,\n          editPost: loadedPost\n        };\n      });\n    };\n\n    _this.cancelEditHandler = function () {\n      _this.setState({\n        isEditing: false,\n        editPost: null\n      });\n    };\n\n    _this.finishEditHandler = function (postData) {\n      _this.setState({\n        editLoading: true\n      });\n\n      var formData = new FormData();\n      formData.append('image', postData.image);\n\n      if (_this.state.editPost) {\n        formData.append('oldPath', _this.state.editPost.imagePath);\n      }\n\n      fetch('http://localhost:8080/post-image', {\n        method: 'PUT',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token\n        },\n        body: formData\n      }).then(function (res) {\n        return res.json();\n      }).then(function (fileResData) {\n        var imageUrl = fileResData.filePath || 'undefined';\n        var graphqlQuery = {\n          query: \"\\n          mutation CreateNewPost($title: String!, $content: String!, $imageUrl: String!) {\\n            createPost(postInput: {title: $title, content: $content, imageUrl: $imageUrl}) {\\n              _id\\n              title\\n              content\\n              imageUrl\\n              creator {\\n                name\\n              }\\n              createdAt\\n            }\\n          }\\n        \",\n          variables: {\n            title: postData.title,\n            content: postData.content,\n            imageUrl: imageUrl\n          }\n        };\n\n        if (_this.state.editPost) {\n          graphqlQuery = {\n            query: \"\\n              mutation UpdateExistingPost($postId: ID!, $title: String!, $content: String!, $imageUrl: String!) {\\n                updatePost(id: $postId, postInput: {title: $title, content: $content, imageUrl: $imageUrl}) {\\n                  _id\\n                  title\\n                  content\\n                  imageUrl\\n                  creator {\\n                    name\\n                  }\\n                  createdAt\\n                }\\n              }\\n            \",\n            variables: {\n              postId: _this.state.editPost._id,\n              title: postData.title,\n              content: postData.content,\n              imageUrl: imageUrl\n            }\n          };\n        }\n\n        return fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          body: JSON.stringify(graphqlQuery),\n          headers: {\n            Authorization: 'Bearer ' + _this.props.token,\n            'Content-Type': 'application/json'\n          }\n        });\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors && resData.errors[0].status === 422) {\n          throw new Error(\"Validation failed. Make sure the email address isn't used yet!\");\n        }\n\n        if (resData.errors) {\n          throw new Error('User login failed!');\n        }\n\n        var resDataField = 'createPost';\n\n        if (_this.state.editPost) {\n          resDataField = 'updatePost';\n        }\n\n        var post = {\n          _id: resData.data[resDataField]._id,\n          title: resData.data[resDataField].title,\n          content: resData.data[resDataField].content,\n          creator: resData.data[resDataField].creator,\n          createdAt: resData.data[resDataField].createdAt,\n          imagePath: resData.data[resDataField].imageUrl\n        };\n\n        _this.setState(function (prevState) {\n          var updatedPosts = _toConsumableArray(prevState.posts);\n\n          var updatedTotalPosts = prevState.totalPosts;\n\n          if (prevState.editPost) {\n            var postIndex = prevState.posts.findIndex(function (p) {\n              return p._id === prevState.editPost._id;\n            });\n            updatedPosts[postIndex] = post;\n          } else {\n            updatedTotalPosts++;\n\n            if (prevState.posts.length >= 2) {\n              updatedPosts.pop();\n            }\n\n            updatedPosts.unshift(post);\n          }\n\n          return {\n            posts: updatedPosts,\n            isEditing: false,\n            editPost: null,\n            editLoading: false,\n            totalPosts: updatedTotalPosts\n          };\n        });\n      }).catch(function (err) {\n        console.log(err);\n\n        _this.setState({\n          isEditing: false,\n          editPost: null,\n          editLoading: false,\n          error: err\n        });\n      });\n    };\n\n    _this.statusInputChangeHandler = function (input, value) {\n      _this.setState({\n        status: value\n      });\n    };\n\n    _this.deletePostHandler = function (postId) {\n      _this.setState({\n        postsLoading: true\n      });\n\n      var graphqlQuery = {\n        query: \"\\n      mutation {\\n          deletePost( id: \\\"\".concat(postId, \"\\\")\\n      }\\n      \")\n      };\n      fetch(\"http://localhost:8080/graphql\", {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Deleting the post failed!');\n        }\n\n        console.log(resData);\n\n        _this.loadPosts(); // this.setState(prevState => {\n        //   const updatedPosts = prevState.posts.filter(p => p._id !== postId);\n        //   return { posts: updatedPosts, postsLoading: false };\n        // });\n\n      }).catch(function (err) {\n        console.log(err);\n\n        _this.setState({\n          postsLoading: false\n        });\n      });\n    };\n\n    _this.errorHandler = function () {\n      _this.setState({\n        error: null\n      });\n    };\n\n    _this.catchError = function (error) {\n      _this.setState({\n        error: error\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Feed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var graphqlQuery = {\n        query: \"\\n        {\\n          user {\\n              status\\n          }\\n        }\\n      \"\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Fetching status failed!');\n        }\n\n        _this2.setState({\n          status: resData.data.user.status\n        });\n      }).catch(this.catchError);\n      this.loadPosts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ErrorHandler, {\n        error: this.state.error,\n        onHandle: this.errorHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(FeedEdit, {\n        editing: this.state.isEditing,\n        selectedPost: this.state.editPost,\n        loading: this.state.editLoading,\n        onCancelEdit: this.cancelEditHandler,\n        onFinishEdit: this.finishEditHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed__status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.statusUpdateHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        placeholder: \"Your status\",\n        control: \"input\",\n        onChange: this.statusInputChangeHandler,\n        value: this.state.status,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        mode: \"flat\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 15\n        }\n      }, \"Update\"))), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed__control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        mode: \"raised\",\n        design: \"accent\",\n        onClick: this.newPostHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }\n      }, \"New Post\")), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }\n      }, this.state.postsLoading && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: 'center',\n          marginTop: '2rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 19\n        }\n      })), this.state.posts.length <= 0 && !this.state.postsLoading ? /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 17\n        }\n      }, \"No posts found.\") : null, !this.state.postsLoading && /*#__PURE__*/React.createElement(Paginator, {\n        onPrevious: this.loadPosts.bind(this, 'previous'),\n        onNext: this.loadPosts.bind(this, 'next'),\n        lastPage: Math.ceil(this.state.totalPosts / 2),\n        currentPage: this.state.postPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 17\n        }\n      }, this.state.posts.map(function (post) {\n        return /*#__PURE__*/React.createElement(Post, {\n          key: post._id,\n          id: post._id,\n          author: post.creator.name,\n          date: new Date(post.createdAt).toLocaleDateString('en-US'),\n          title: post.title,\n          image: post.imageUrl,\n          content: post.content,\n          onStartEdit: _this3.startEditPostHandler.bind(_this3, post._id),\n          onDelete: _this3.deletePostHandler.bind(_this3, post._id),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 23\n          }\n        });\n      }))));\n    }\n  }]);\n\n  return Feed;\n}(Component);\n\nexport default Feed;","map":{"version":3,"sources":["/Users/voyager-imac/WebstormProjects/rest-api/client/src/pages/Feed/Feed.js"],"names":["React","Component","Fragment","Post","Button","FeedEdit","Input","Paginator","Loader","ErrorHandler","Feed","state","isEditing","posts","totalPosts","editPost","status","postPage","postsLoading","editLoading","loadPosts","direction","setState","page","graphqlQuery","query","variables","fetch","method","headers","Authorization","props","token","body","JSON","stringify","then","res","json","resData","errors","Error","data","map","post","imagePath","imageUrl","catch","catchError","statusUpdateHandler","event","preventDefault","userStatus","console","log","newPostHandler","startEditPostHandler","postId","prevState","loadedPost","find","p","_id","cancelEditHandler","finishEditHandler","postData","formData","FormData","append","image","fileResData","filePath","title","content","resDataField","creator","createdAt","updatedPosts","updatedTotalPosts","postIndex","findIndex","length","pop","unshift","err","error","statusInputChangeHandler","input","value","deletePostHandler","errorHandler","user","textAlign","marginTop","bind","Math","ceil","name","Date","toLocaleDateString"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nimport Post from '../../components/Feed/Post/Post';\nimport Button from '../../components/Button/Button';\nimport FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\nimport Input from '../../components/Form/Input/Input';\nimport Paginator from '../../components/Paginator/Paginator';\nimport Loader from '../../components/Loader/Loader';\nimport ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\nimport './Feed.css';\n\n\nclass Feed extends Component {\n  state = {\n    isEditing: false,\n    posts: [],\n    totalPosts: 0,\n    editPost: null,\n    status: '',\n    postPage: 1,\n    postsLoading: true,\n    editLoading: false\n  };\n\n  componentDidMount () {\n\n    const graphqlQuery = {\n      query: `\n        {\n          user {\n              status\n          }\n        }\n      `\n    };\n\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    })\n        .then(res => {\n\n          return res.json();\n        })\n        .then(resData => {\n\n          if (resData.errors) {\n            throw new Error('Fetching status failed!');\n          }\n\n          this.setState({ status: resData.data.user.status });\n        })\n        .catch(this.catchError);\n\n    this.loadPosts();\n\n  }\n\n  loadPosts = direction => {\n    if (direction) {\n      this.setState({ postsLoading: true, posts: [] });\n    }\n\n    // pagination\n    let page = this.state.postPage;\n    if (direction === 'next') {\n      page++;\n      this.setState({ postPage: page });\n    }\n    if (direction === 'previous') {\n      page--;\n      this.setState({ postPage: page });\n    }\n\n    const graphqlQuery = {\n      query: `\n        query FetchPosts($page: Int) {\n          posts(page: $page) {\n            posts {\n              _id\n              title\n              content\n              imageUrl\n              creator {\n                name\n              }\n              createdAt\n            }\n            totalPosts\n          }\n        }\n      `,\n      variables: {\n        page: page\n      }\n    };\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    })\n        .then(res => {\n\n          return res.json();\n\n        })\n        .then(resData => {\n\n          if (resData.errors) {\n            throw new Error('Fetching posts failed!');\n          }\n\n          this.setState({\n            posts: resData.data.posts.posts.map(post => {\n              return {\n                ...post,\n                imagePath: post.imageUrl\n              };\n            }),\n            totalPosts: resData.data.posts.totalPosts,\n            postsLoading: false\n          });\n        })\n        .catch(this.catchError);\n  };\n\n  statusUpdateHandler = event => {\n    event.preventDefault();\n\n    const graphqlQuery = {\n      query: `\n          mutation UpdateUserStatus($userStatus: String!) {\n              updateStatus( status: $userStatus ) {\n                    status\n              }\n          }\n      `,\n      variables: {\n        userStatus: this.state.status\n      }\n    };\n\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    })\n        .then(res => {\n\n          return res.json();\n        })\n        .then(resData => {\n\n          if (resData.errors) {\n            throw new Error('Fetching posts failed!');\n          }\n\n          console.log(resData);\n        })\n        .catch(this.catchError);\n  };\n\n  newPostHandler = () => {\n    this.setState({ isEditing: true });\n  };\n\n  startEditPostHandler = postId => {\n    this.setState(prevState => {\n      const loadedPost = { ...prevState.posts.find(p => p._id === postId) };\n\n      return {\n        isEditing: true,\n        editPost: loadedPost\n      };\n    });\n  };\n\n  cancelEditHandler = () => {\n    this.setState({ isEditing: false, editPost: null });\n  };\n\n  /*\n  finishEditHandler = postData => {\n    this.setState({\n      editLoading: true\n    });\n\n    // Set up data (with image!)\n    const formData = new FormData();\n    formData.append('image', postData.image);\n    if (this.state.editPost) {\n      formData.append('oldPath', this.state.editPost.imagePath);\n    }\n\n    fetch('http://localhost:8080/post-image', {\n      method: 'PUT',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token\n      },\n      body: formData\n    })\n        .then(res => res.json()\n        )\n        .then(fileResData => {\n\n          const imageUrl = fileResData.filePath || 'undefined';\n          console.log(imageUrl);\n\n          let graphqlQuery = {\n            query: `\n              mutation CreateNewPost($title: String!, $content: String!, $imageUrl: String!) {\n                createPost(postInput: {\n                  title: $title,\n                  content: $content,\n                  imageUrl: $imageUrl\n                }) {\n                  _id\n                  title\n                  content\n                  imageUrl\n                  creator {\n                  name\n                  }\n                  createdAt\n                }\n              }\n          `,\n            variables: {\n              title: postData.title,\n              content: postData.content,\n              imageUrl: imageUrl\n            }\n          };\n\n          // for updating a post\n          if (this.state.editPost) {\n\n            graphqlQuery = {\n              query: `\n              mutation UpdateExistingPost($postId: ID!, $title: String!, $content: String!, $imageUrl: String!) {\n                updatePost(id: $postId, postInput: {\n                  title: $title:,\n                  content: $content,\n                  imageUrl: $imageUrl\n                }) {\n                  _id\n                  title\n                  content\n                  imageUrl\n                  creator {\n                  name\n                  }\n                  createdAt\n                }\n              }\n          `,\n              variables: {\n                postId: this.state.editPost._id,\n                title: postData.title,\n                content: postData.content,\n                imageUrl: imageUrl\n              }\n            };\n\n          }\n\n          return fetch('http://localhost:8080/graphql', {\n            method: 'POST',\n            body: JSON.stringify(graphqlQuery),\n            headers: {\n              Authorization: 'Bearer ' + this.props.token,\n              'Content-Type': 'application/json'\n            }\n          });\n        })\n        .then(res => {\n\n          return res.json();\n\n        })\n        .then(resData => {\n\n          if (resData.errors && resData.errors[0].status === 422) {\n            throw new Error(\n                'Validation failed. Make sure the email address isn\\'t used yet!'\n            );\n          }\n\n          if (resData.errors) {\n            throw new Error('User login failed!');\n          }\n\n          let resDataField = 'createPost';\n          if (this.state.editPost) {\n            resDataField = 'updatePost';\n          }\n\n          const post = {\n            _id: resData.data[resDataField]._id,\n            title: resData.data[resDataField].title,\n            content: resData.data[resDataField].content,\n            creator: resData.data[resDataField].creator,\n            createdAt: resData.data[resDataField].createdAt,\n            imagePath: resData.data[resDataField].imageUrl\n          };\n          this.setState(prevState => {\n\n            let updatedPosts = [...prevState.posts];\n\n            if (prevState.editPost) {\n              const postIndex = prevState.posts.findIndex(\n                  p => p._id === prevState.editPost._id\n              );\n              updatedPosts[postIndex] = post;\n            } else {\n              updatedPosts.pop();\n              updatedPosts.unshift(post);\n            }\n\n            return {\n              posts: updatedPosts,\n              isEditing: false,\n              editPost: null,\n              editLoading: false\n            };\n\n          });\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({\n            isEditing: false,\n            editPost: null,\n            editLoading: false,\n            error: err\n          });\n        });\n  };\n\n   */\n\n  finishEditHandler = postData => {\n    this.setState({\n      editLoading: true\n    });\n    const formData = new FormData();\n    formData.append('image', postData.image);\n    if (this.state.editPost) {\n      formData.append('oldPath', this.state.editPost.imagePath);\n    }\n    fetch('http://localhost:8080/post-image', {\n      method: 'PUT',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token\n      },\n      body: formData\n    })\n        .then(res => res.json())\n        .then(fileResData => {\n          const imageUrl = fileResData.filePath || 'undefined';\n          let graphqlQuery = {\n            query: `\n          mutation CreateNewPost($title: String!, $content: String!, $imageUrl: String!) {\n            createPost(postInput: {title: $title, content: $content, imageUrl: $imageUrl}) {\n              _id\n              title\n              content\n              imageUrl\n              creator {\n                name\n              }\n              createdAt\n            }\n          }\n        `,\n            variables: {\n              title: postData.title,\n              content: postData.content,\n              imageUrl: imageUrl\n            }\n          };\n\n          if (this.state.editPost) {\n            graphqlQuery = {\n              query: `\n              mutation UpdateExistingPost($postId: ID!, $title: String!, $content: String!, $imageUrl: String!) {\n                updatePost(id: $postId, postInput: {title: $title, content: $content, imageUrl: $imageUrl}) {\n                  _id\n                  title\n                  content\n                  imageUrl\n                  creator {\n                    name\n                  }\n                  createdAt\n                }\n              }\n            `,\n              variables: {\n                postId: this.state.editPost._id,\n                title: postData.title,\n                content: postData.content,\n                imageUrl: imageUrl\n              }\n            };\n          }\n\n          return fetch('http://localhost:8080/graphql', {\n            method: 'POST',\n            body: JSON.stringify(graphqlQuery),\n            headers: {\n              Authorization: 'Bearer ' + this.props.token,\n              'Content-Type': 'application/json'\n            }\n          });\n        })\n        .then(res => {\n          return res.json();\n        })\n        .then(resData => {\n          if (resData.errors && resData.errors[0].status === 422) {\n            throw new Error(\n                \"Validation failed. Make sure the email address isn't used yet!\"\n            );\n          }\n          if (resData.errors) {\n            throw new Error('User login failed!');\n          }\n          let resDataField = 'createPost';\n          if (this.state.editPost) {\n            resDataField = 'updatePost';\n          }\n          const post = {\n            _id: resData.data[resDataField]._id,\n            title: resData.data[resDataField].title,\n            content: resData.data[resDataField].content,\n            creator: resData.data[resDataField].creator,\n            createdAt: resData.data[resDataField].createdAt,\n            imagePath: resData.data[resDataField].imageUrl\n          };\n          this.setState(prevState => {\n            let updatedPosts = [...prevState.posts];\n            let updatedTotalPosts = prevState.totalPosts;\n            if (prevState.editPost) {\n              const postIndex = prevState.posts.findIndex(\n                  p => p._id === prevState.editPost._id\n              );\n              updatedPosts[postIndex] = post;\n            } else {\n              updatedTotalPosts++;\n              if (prevState.posts.length >= 2) {\n                updatedPosts.pop();\n              }\n              updatedPosts.unshift(post);\n            }\n            return {\n              posts: updatedPosts,\n              isEditing: false,\n              editPost: null,\n              editLoading: false,\n              totalPosts: updatedTotalPosts\n            };\n          });\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({\n            isEditing: false,\n            editPost: null,\n            editLoading: false,\n            error: err\n          });\n        });\n  };\n\n  statusInputChangeHandler = (input, value) => {\n    this.setState({ status: value });\n  };\n\n  deletePostHandler = postId => {\n    this.setState({ postsLoading: true });\n\n    const graphqlQuery = {\n      query: `\n      mutation {\n          deletePost( id: \"${postId}\")\n      }\n      `\n    };\n\n    fetch(\n        `http://localhost:8080/graphql`, {\n          method: 'POST',\n          headers: {\n            Authorization: 'Bearer ' + this.props.token,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(graphqlQuery)\n        })\n        .then(res => {\n\n          return res.json();\n        })\n        .then(resData => {\n\n          if (resData.errors) {\n            throw new Error('Deleting the post failed!');\n          }\n\n          console.log(resData);\n          this.loadPosts();\n          // this.setState(prevState => {\n          //   const updatedPosts = prevState.posts.filter(p => p._id !== postId);\n          //   return { posts: updatedPosts, postsLoading: false };\n          // });\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({ postsLoading: false });\n        });\n  };\n\n  errorHandler = () => {\n    this.setState({ error: null });\n  };\n\n  catchError = error => {\n    this.setState({ error: error });\n  };\n\n  render () {\n    return (\n        <Fragment>\n          <ErrorHandler error={this.state.error} onHandle={this.errorHandler}/>\n          <FeedEdit\n              editing={this.state.isEditing}\n              selectedPost={this.state.editPost}\n              loading={this.state.editLoading}\n              onCancelEdit={this.cancelEditHandler}\n              onFinishEdit={this.finishEditHandler}\n          />\n          <section className=\"feed__status\">\n            <form onSubmit={this.statusUpdateHandler}>\n              <Input\n                  type=\"text\"\n                  placeholder=\"Your status\"\n                  control=\"input\"\n                  onChange={this.statusInputChangeHandler}\n                  value={this.state.status}\n              />\n              <Button mode=\"flat\" type=\"submit\">\n                Update\n              </Button>\n            </form>\n          </section>\n          <section className=\"feed__control\">\n            <Button mode=\"raised\" design=\"accent\" onClick={this.newPostHandler}>\n              New Post\n            </Button>\n          </section>\n          <section className=\"feed\">\n            {this.state.postsLoading && (\n                <div style={{ textAlign: 'center', marginTop: '2rem' }}>\n                  <Loader/>\n                </div>\n            )}\n            {this.state.posts.length <= 0 && !this.state.postsLoading ? (\n                <p style={{ textAlign: 'center' }}>No posts found.</p>\n            ) : null}\n            {!this.state.postsLoading && (\n                <Paginator\n                    onPrevious={this.loadPosts.bind(this, 'previous')}\n                    onNext={this.loadPosts.bind(this, 'next')}\n                    lastPage={Math.ceil(this.state.totalPosts / 2)}\n                    currentPage={this.state.postPage}\n                >\n                  {this.state.posts.map(post => (\n                      <Post\n                          key={post._id}\n                          id={post._id}\n                          author={post.creator.name}\n                          date={new Date(post.createdAt).toLocaleDateString('en-US')}\n                          title={post.title}\n                          image={post.imageUrl}\n                          content={post.content}\n                          onStartEdit={this.startEditPostHandler.bind(this, post._id)}\n                          onDelete={this.deletePostHandler.bind(this, post._id)}\n                      />\n                  ))}\n                </Paginator>\n            )}\n          </section>\n        </Fragment>\n    );\n  }\n}\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}